// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int           @id @default(autoincrement())
  username          String        @unique
  email             String        @unique
  password          String
  role              Role
  referralCode      String?       @unique
  referredBy        User?         @relation("ReferralRelation", fields: [referredById], references: [id])
  referredById      Int?
  referrals         User[]        @relation("ReferralRelation")
  points            UserPoint[]
  voucher           UserVoucher[]
  transactions      Transaction[]
  reviews           Review[]
  events            Event[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  verificationToken String?
  otp               String?
  isVerified        Boolean       @default(false)
  age               Int?
  gender            String?
  imageProfile      String?
  contactNumber     String?

  @@map("users")
}

enum Role {
  customer
  organizer
}

model UserPoint {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  points    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  isUsed    Boolean  @default(false)
  @@map("user_points")
}

model UserVoucher {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  discount  Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  isUsed    Boolean  @default(false)
  @@map("user_vouchers")
}


model Event {
  id             Int               @id @default(autoincrement())
  title          String
  imageUrl       String            @db.Text
  description    String            @db.Text
  startDate      DateTime
  endDate        DateTime
  categoryId     Int
  category       Category?         @relation(fields: [categoryId], references: [id])
  time           String
  availableSeats Int
  isFree         Boolean           @default(true)
  organizerId    Int
  organizer      User?             @relation(fields: [organizerId], references: [id])
  location       String
  cityId         Int
  city           City?             @relation(fields: [cityId], references: [id])
  transactions   Transaction[]
  reviews        Review[]
  ticketTypes    EventTicketType[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  maxTicket      Int
  promotion      Promotion[]

  @@map("events")
}

model TicketType {
  id     Int               @id @default(autoincrement())
  name   String
  events EventTicketType[]
}

model EventTicketType {
  event        Event      @relation(fields: [eventId], references: [id])
  eventId      Int
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId Int
  price        Decimal
  quantity     Int

  @@id([eventId, ticketTypeId])
}

model Transaction {
  id             Int          @id @default(autoincrement())
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  eventId        Int
  event          Event        @relation(fields: [eventId], references: [id])
  quantity       Int
  totalPrice     Decimal
  discountAmount Decimal      @default(0)
  status         STATUS
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  receiptUrl     String
  pointsUsed     Int?           @default(0)
  @@index([userId])
  @@index([eventId])
  @@map("transactions")
}

model Promotion {
  id         Int      @id @default(autoincrement())
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    Int
  code       String   @unique
  discount   Int
  expiryDate DateTime
  maxUsage   Int
  usedCount  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("promotions")
}

enum STATUS {
  pending
  paid
  cancelled
  success
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([eventId])
  @@map("reviews")
}

model Category {
  id     Int     @id @default(autoincrement())
  name   String
  events Event[]

  @@map("categories")
}

model City {
  id     Int     @id @default(autoincrement())
  name   String
  events Event[]

  @@map("cities")
}

model InvalidToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
}
