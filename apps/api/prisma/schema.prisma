// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  email        String        @unique
  password     String
  role         String        @default("customer")
  referralCode String        @unique
  points       Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  reviews      Review[]
  events       Event[]

  @@map("users")
}

model Event {
  id             Int           @id @default(autoincrement())
  title          String
  imageUrl       String        @db.Text
  description    String        @db.Text
  startDate      DateTime
  endDate        DateTime
  time           DateTime
  price          Decimal       @default(0)
  availableSeats Int
  isFree         Boolean       @default(true)
  organizerId    Int
  organizer      User          @relation(fields: [organizerId], references: [id])
  locationId     Int
  location       Location          @relation(fields: [locationId], references: [id])
  transactions   Transaction[]
  reviews        Review[]
  categories     Category[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  maxticket      Int

  @@map("events")
}

model Transaction {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  eventId        Int
  event          Event    @relation(fields: [eventId], references: [id])
  quantity       Int
  totalPrice     Decimal
  discountAmount Decimal  @default(0)
  status         STATUS // "pending", "paid", "cancelled", "success"
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  receiptUrl     String

  @@index([userId])
  @@index([eventId])
  @@map("transactions")
}

enum STATUS {
  pending
  paid
  cancelled
  success
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([eventId])
  @@map("reviews")
}

model Category {
  id     Int     @id @default(autoincrement())
  name   String
  events Event[]

  @@map("categories")
}

model Location {
  id     Int     @id @default(autoincrement())
  name   String
  events Event[]

  @@map("locations")
}

model Voucher {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  discount   Int
  expiryDate DateTime
  maxUsage   Int
  usedCount  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("vouchers")
}
