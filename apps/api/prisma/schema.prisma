// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  email          String    @unique
  password       String
  role           String    @default("customer")
  referralCode   String    @unique
  points         Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  transactions   Transaction[]
  reviews        Review[]
  events         Event[]

  @@map("users")
}

model Event {
  id               Int       @id @default(autoincrement())
  title            String
  description      String
  location         String
  startDate        DateTime
  endDate          DateTime
  price            Decimal   @default(0)
  availableSeats   Int
  isFree           Boolean   @default(true)
  organizerId      Int
  organizer        User      @relation(fields: [organizerId], references: [id])
  transactions     Transaction[]
  reviews          Review[]
  categories       Category[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("events")
}

model Transaction {
  id             Int      @id @default(autoincrement())
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  eventId        Int
  event          Event    @relation(fields: [eventId], references: [id])
  quantity       Int
  totalPrice     Decimal
  discountAmount Decimal  @default(0)
  status         STATUS   // "pending", "paid", "cancelled", "success"
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
  @@index([eventId])
  @@map("transactions")
}

enum STATUS {
pending
paid
cancelled
success
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([eventId])
  @@map("reviews")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  events    Event[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@map("categories")
}

model Voucher {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  discount    Int
  expiryDate  DateTime
  maxUsage    Int
  usedCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

   @@map("vouchers")
}
